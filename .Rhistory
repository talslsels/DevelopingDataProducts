g <- g + geom_point(aes(group=supp,colour=supp,size=2,alpha=0.6))
g <- g + geom_line(data=avg,aes(group=supp,colour=supp))
print(g)
par(mar = rep(2, 4))
boxplot(len ~ dose * supp, data=ToothGrowth, col = (c("green", "red", "blue")), xlab = "Dose & Supplement", ylab="Tooth Length", main="Boxplots of Tooth Growth Data")
boxplot(len ~ supp * dose, data=ToothGrowth, col = (c(red", "blue")), xlab = "Supplement & Dose", ylab="Tooth Length", main="Boxplots of Tooth Growth Data")
boxplot(len ~ supp * dose, data=ToothGrowth, col = (c(red", "blue")), xlab = "Supplement & Dose", ylab="Tooth Length", main="Boxplots of Tooth Growth Data")
```
boxplot(len ~ supp * dose, data=ToothGrowth, col = (c(red", "blue")), xlab = "Supplement & Dose", ylab="Tooth Length", main="Boxplots of Tooth Growth Data")
par(mar = rep(2, 4))
boxplot(len ~ supp * dose, data=ToothGrowth, col = (c(red", "blue")), xlab = "Supplement & Dose", ylab="Tooth Length", main="Boxplots of Tooth Growth Data")
par(mar = rep(2, 4))
boxplot(len ~ supp * dose, data=ToothGrowth, col = (c("red","blue")), xlab = "Supplement & Dose", ylab="Tooth Length", main="Boxplots of Tooth Growth Data")
par(mar = rep(2, 4))
boxplot(len ~ dose * supp, data=ToothGrowth, col = (c("green", "red", "blue")), xlab = "Dose & Supplement", ylab="Tooth Length", main="Boxplots of Tooth Growth Data")
boxplot(len ~ supp * dose, data=ToothGrowth, col = (c("red", "blue")), xlab = "Supplement & Dose", ylab="Tooth Length", main="Boxplots of Tooth Growth Data")
par(mar = rep(2, 4))
boxplot(len ~ dose * supp, data=ToothGrowth, col = (c("green", "red", "blue")), xlab = "Dose & Supplement", ylab="Tooth Length", main="Boxplots of Tooth Growth Data")
boxplot(len ~ supp * dose, data=ToothGrowth, col = (c("red", "blue")), xlab = "Supplement & Dose", ylab="Tooth Length", main="Boxplots of Tooth Growth Data")
tgdata <- mutate(tgdata, diffval = OJ- VC)
tgdata10 <- subset(ToothGrowth, dose ==1.0)
t.test(tgdata10$diffval)
library(reshape2)
# Add the ID column to the data frame
dataIDAdded <- data.frame(ToothGrowth,PigID=rep(c(1:10),6))
tgdata <- dcast(dataIDAdded,dose+PigID~supp,value.var="len")
# Adjust the column names of the data frame
names(tgdata)[-(1: 2)] <- paste("supp_", names(tgdata)[-(1: 2)], sep = "")
library(dplyr)
# Add a difference value column to the data frame
tgdata <- mutate(tgdata,diffval=supp_OJ-supp_VC)
tgdata05 <- subset(tgdata,dose==0.5)
t.test(tgdata05$diffval)
tgdata05 <- subset(ToothGrowth,ToothGrowth$dose==0.5)
tgdata05 <- subset(ToothGrowth,ToothGrowth$dose==0.5)
print(g)
dim(tgdata05)
str(tgdata05)
tail(tgdata05)
tgdata05 <- subset(ToothGrowth,ToothGrowth$dose==0.5)
t.test(tgdata05$supp)
?pdflatex
??pdflatex
subset1 <- subset(ToothGrowth, subset = ToothGrowth$dose == "1")
subset2 <- subset(ToothGrowth, subset = ToothGrowth$dose == "2")
subset0.5 <- subset(ToothGrowth, subset = ToothGrowth$dose == "0.5")
t.test(subset1$len - subset2$len)
subset1 <- subset(ToothGrowth, subset = ToothGrowth$dose == "1")
subset1.OJ <- subset(subset1, subset = subset$supp="OJ")
subset1.VC <- subset(subset1, subset = subset$supp="VC")
subset2 <- subset(ToothGrowth, subset = ToothGrowth$dose == "2")
subset2.OJ <- subset(subset1, subset = subset$supp="OJ")
subset2.VC <- subset(subset1, subset = subset$supp="VC")
subset0.5 <- subset(ToothGrowth, subset = ToothGrowth$dose == "0.5")
subset0.5.OJ <- subset(subset1, subset = subset$supp="OJ")
subset0.5.VC <- subset(subset1, subset = subset$supp="VC")
# dose= 1, compare OJ and VC
t.test(subset1.OJ$len - subset1.VC$len)
subset1 <- subset(ToothGrowth, subset = ToothGrowth$dose == "1")
subset1.OJ <- subset(subset1, subset = subset$supp=="OJ")
subset1.VC <- subset(subset1, subset = subset$supp=="VC")
subset2 <- subset(ToothGrowth, subset = ToothGrowth$dose == "2")
subset2.OJ <- subset(subset1, subset = subset$supp=="OJ")
subset2.VC <- subset(subset1, subset = subset$supp=="VC")
subset0.5 <- subset(ToothGrowth, subset = ToothGrowth$dose == "0.5")
subset0.5.OJ <- subset(subset1, subset = subset$supp=="OJ")
subset0.5.VC <- subset(subset1, subset = subset$supp=="VC")
# dose= 1, compare OJ and VC
t.test(subset1.OJ$len - subset1.VC$len)
subset1 <- subset(ToothGrowth, subset = ToothGrowth$dose == "1")
subset1.OJ <- subset(subset1, subset = subset$supp=="OJ")
subset1.VC <- subset(subset1, subset = subset$supp=="VC")
subset1 <- subset(ToothGrowth, subset = ToothGrowth$dose == "1")
subset1.OJ <- subset(subset1, subset = subset1$supp=="OJ")
subset1.VC <- subset(subset1, subset = subset1$supp=="VC")
subset1 <- subset(ToothGrowth, subset = ToothGrowth$dose == "1")
subset1.OJ <- subset(subset1, subset = subset1$supp=="OJ")
subset1.VC <- subset(subset1, subset = subset1$supp=="VC")
subset2 <- subset(ToothGrowth, subset = ToothGrowth$dose == "2")
subset2.OJ <- subset(subset2, subset = subset2$supp=="OJ")
subset2.VC <- subset(subset2, subset = subset2$supp=="VC")
subset5 <- subset(ToothGrowth, subset = ToothGrowth$dose == "0.5")
subset5.OJ <- subset(subset5, subset = subset5$supp=="OJ")
subset5.VC <- subset(subset5, subset = subset$5supp=="VC")
subset1 <- subset(ToothGrowth, subset = ToothGrowth$dose == "1")
subset1.OJ <- subset(subset1, subset = subset1$supp=="OJ")
subset1.VC <- subset(subset1, subset = subset1$supp=="VC")
subset2 <- subset(ToothGrowth, subset = ToothGrowth$dose == "2")
subset2.OJ <- subset(subset2, subset = subset2$supp=="OJ")
subset2.VC <- subset(subset2, subset = subset2$supp=="VC")
subset5 <- subset(ToothGrowth, subset = ToothGrowth$dose == "0.5")
subset5.OJ <- subset(subset5, subset = subset5$supp=="OJ")
subset5.VC <- subset(subset5, subset = subset5$supp=="VC")
# dose= 1, compare OJ and VC
t.test(subset1.OJ$len - subset1.VC$len)
t.test(subset2.OJ$len - subset2.VC$len)
t.test(subset5.OJ$len - subset5.VC$len)
Lambda = 0.2
n = 40
nSims = 1:1000
set.seed(820)
Means <data.
frame(x = sapply(nSims, function(x) {
mean(rexp(n, Lambda))
}))
head(Means)
Lambda = 0.2
n = 40
nSims = 1:1000
set.seed(820)
Means <data.frame(x = sapply(nSims, function(x) {
mean(rexp(n, Lambda))
}))
head(Means)
Lambda = 0.2
n = 40
nSims = 1:1000
set.seed(820)
Means <data.frame(x = sapply(nSims, function(x)
{ mean(rexp(n, Lambda))
}))
head(Means)
Lambda = 0.2
n = 40
nSims = 1:1000
set.seed(820)
Means <- data.frame(x = sapply(nSims, function(x)
{ mean(rexp(n, Lambda))
}))
head(Means)
library(ggplot2)
ggplot(data = Means, aes(x = x)) + geom_histogram(aes(y = ..density..), fill = I("darkolivegreen3"),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd = sd(Means$x)))
library(ggplot2)
ggplot(data = Means, aes(x = x)) + geom_histogram(aes(y = ..density..), fill = I("blue"),
binwidth = 0.2, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd = sd(Means$x)))
```{r}
library(ggplot2)
ggplot(data = Means, aes(x = x)) + geom_histogram(aes(y = ..density..), fill = I("blue"),
binwidth = 0.5, color = I("green")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd = sd(Means$x)))
sd = sd(Means$x)
sd
---
title: "Statistic Inference Course Project"
author: "By Shu Liu"
date: "Sunday, August 24, 2014"
---
The exponential distribution can be simulated in R with rexp(n, lambda) where lambda is the rate parameter. The mean of exponential distribution is 1/lambda and the standard deviation is also also 1/lambda. Set lambda = 0.2 for all of the simulations. In this simulation, you will investigate the distribution of averages of 40 exponential(0.2)s. Note that you will need to do a thousand or so simulated averages of 40 exponentials.
Illustrate via simulation and associated explanatory text the properties of the distribution of the mean of 40 exponential(0.2)s.  You should
**1. Show where the distribution is centered at and compare it to the theoretical center of the distribution.**
**2. Show how variable it is and compare it to the theoretical variance of the distribution.**
**3. Show that the distribution is approximately normal.**
**4. Evaluate the coverage of the confidence interval for 1/lambda: X¯±1.96Sn.**
**1 & 2**
```{r, echo=FALSE}
Lambda = 0.2
n = 40
nSims = 1:1000
set.seed(820)
Means <- data.frame(x = sapply(nSims, function(x)
{ mean(rexp(n, Lambda))
}))
head(Means)
m = mean(Means$x)
m
sd = sd(Means$x)
sd
```
Expected standard deviation
```{r, echo=FALSE}
(1/Lambda)/sqrt(40)
```
Variance of simulations
```{r, echo=FALSE}
var(Means$x)
```
Expected Variance
```{r, echo=FALSE}
((1/Lambda)/sqrt(40))^2
```
**3**
```{r}
library(ggplot2)
ggplot(data = Means, aes(x = x)) + geom_histogram(aes(y = ..density..), fill = I("blue"),
binwidth = 0.5, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd = sd(Means$x)))
```
**4**
```{r, echo=FALSE}
mean(Means$x) + c(1,1) * 1.96 * sd(Means$x)/sqrt(nrow(Means))
```
**Answers:**
1)
2)
3) A approximately normal distributions was displayed by a histogram plot.
4) The 95% confidence interval for the mean of means is 4.950
Lambda = 0.2
n = 40
nSims = 1:1000
set.seed(820)
Means <- data.frame(x = sapply(nSims, function(x)
{ mean(rexp(n, Lambda))
}))
head(Means)
m = mean(Means$x)
m
sd = sd(Means$x)
sd
(1/Lambda)/sqrt(40)
library(ggplot2)
ggplot(data = Means, aes(x = x)) + geom_histogram(aes(y = ..density..), fill = I("blue"),
binwidth = 0.5, color = I("black")) + stat_function(fun = dnorm, arg = list(mean = 5,
sd = sd(Means$x)))
mean(Means$x) + c(1,1) * 1.96 * sd(Means$x)/sqrt(nrow(Means))
mean(Means$x) + c(-1,1) * 1.96 * sd(Means$x)/sqrt(nrow(Means))
qnorm(0.01)
quit
quit()
library(manipulate)
maniuplate(plot(1:x), x= slider(1,100))
manipulate(plot(1:x), x= slider(1,100))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
require(rCharts)
install.packages("rCharts")
require(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("Rtools")
library(devtools)
require(devtools)
install_github('rCharts', 'ramnathv')
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line",
"bubble", "scatter"), group = "Clap", size = "Age")
h1$print("chart5")
h1 <- hPlot(x = "Wr.Hnd", y = "NW.Hnd", data = MASS::survey, type = c("line",                                                                "bubble", "scatter"), group = "Clap", size = "Age")
h1$print("chart5")
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("shyinapps")
install.packages("shinyapps")
install.packages('shinyapps')
library(devtools)
install.packages('shinyapps')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(
name="talslsels",
token="3B268EDE9EA028B79D447516FAD792F1",
secret="MYH0jk9lKjOlQ7PfnCyQUyxoKdKQ6yHawOc6pcL2")
deployApp()
install.packages("UsingR")
library(UsingR)
My_u <- function {u
x1=0.18
x2=-1.54
x3=0.42
x4=0.95
w1=2
w2=1
w3 =3
w4=1
z= w1*(x1-u)*(x1-u) + w2*(x2-u)*(x2-u) + w3*(x3-u)*(x3-u) + w4*(x4-u)*(x4-u)
return z
}
My_u <- function (u) {
x1=0.18
x2=-1.54
x3=0.42
x4=0.95
w1=2
w2=1
w3 =3
w4=1
z= w1*(x1-u)*(x1-u) + w2*(x2-u)*(x2-u) + w3*(x3-u)*(x3-u) + w4*(x4-u)*(x4-u)
return z
}
My_u <- function (u) {
x1=0.18
x2=-1.54
x3=0.42
x4=0.95
w1=2
w2=1
w3 =3
w4=1
z= w1*(x1-u)*(x1-u) + w2*(x2-u)*(x2-u) + w3*(x3-u)*(x3-u) + w4*(x4-u)*(x4-u)
z
}
My_u(0.300)
My_u(0.1471)
My_u(0.0025)
My_u(1.077)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
library(manipulate)
myPlot <- function(beta){
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
plot(
as.numeric(as.vector(freqData$parent)),
as.numeric(as.vector(freqData$child)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "parent",
ylab = "child"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
mean_x <- mean(x)
mean_y <- mean(y)
mean_x
mean_y
library(manipulate)
myPlot <- function(beta){
y <- y - mean_y
x <- x - mean_x
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("x", "y", "freq")
plot(
as.numeric(as.vector(freqData$x)),
as.numeric(as.vector(freqData$y)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "x",
ylab = "y"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
mean_x <- mean(x)
mean_y <- mean(y)
library(manipulate)
myPlot <- function(beta){
y <- y - mean_y
x <- x - mean_x
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("x", "y", "freq")
plot(
as.numeric(as.vector(freqData$x)),
as.numeric(as.vector(freqData$y)),
pch = 21, col = "black", bg = "lightblue",
cex = .15 * freqData$freq,
xlab = "x",
ylab = "y"
)
abline(0, beta, lwd = 3)
points(0, 0, cex = 2, pch = 19)
mse <- mean( (y - beta * x)^2 )
title(paste("beta = ", beta, "mse = ", round(mse, 3)))
}
manipulate(myPlot(beta), beta = slider(-2, 1, step = 0.02))
data(mtcars)
data(mtcars)
plot(mtcars$weight,mtcars$mpg,pch=19,col="blue")
str(mtcars)
plot(mtcars$wt,mtcars$mpg,pch=19,col="blue")
data(mtcars)
str(mtcars)
plot(mtcars$wt,mtcars$mpg,pch=19,col="blue")
lm(I(mtcars$wt - mean(mtcars$wt))~ I(mtcars$mpg - mean(mtcars&mpg)) - 1, data = galton)
data(mtcars)
str(mtcars)
plot(mtcars$wt,mtcars$mpg,pch=19,col="blue")
lm(I(mtcars$wt - mean(mtcars$wt))~ I(mtcars$mpg - mean(mtcars&mpg)) - 1, data = mtcars)
plot(mtcars$wt,mtcars$mpg,pch=19,col="blue")
lm(I(mtcars$mpg - mean(mtcars$mpg))~ I(mtcars$wt - mean(mtcars&wt)) - 1, data = mtcars)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
z <- x*w
mean(z)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
fit.origin <- lm( y ~ x - 1 )
summary(fit.origin)
data(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
m.x <- mean(x)
sd.x <- sd(x)
(x[1] - m.x)/sd.x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm( y ~ x )
# Question 9
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
summary(fit)
e <- resid(fit)
sqe <- e*e
res.var <- sum(sqe) / (length(e) - 2)
sqrt(res.var)
data(mtcars)
attach(mtcars)
fit <- lm(mpg ~ wt, mtcars)
summary(fit)
exp <- fit$coefficients[1] + mean(wt) * fit$coefficients[2]
exp - 2 * 0.5591
fit[[1]][1] + 3 * fit[[1]][2]
2 * (fit$coefficients[2] - 2 * 0.5591)
attributes(fit)
w.c <- fit$residuals ^ 2
fit.c <- lm(mpg ~ 1, mtcars)
fit.c.res <- fit.c$residuals ^ 2
sum(fit.c.res)
sum(w.c) /sum(fit.c.res)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
```{r}
fit <- lm(y ~ x1 + x2 + x3)
summary(fit)
```
data(mtcars)
8 fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
9 summary(fit)
data(mtcars)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
fit2 <- lm(mpg ~ factor(cyl), mtcars)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl)*wt, mtcars)
summary(fit3)
getwd()
setwd("c:/Data Science/Developing Data Products/CourseProject")
getwd()
runApp()
runApp
runApp()
runApp
runApp
runApp("c:/Data Science/Developing Data Products/CourseProject")
runApp()
?runapp
??runapp
library(shiny)
runApp()
